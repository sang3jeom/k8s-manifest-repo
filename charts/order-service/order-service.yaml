apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: dev
  labels: { app: order-service }
spec:
  replicas: 2
  strategy: # 추가
    type: RollingUpdate # 추가
    rollingUpdate: # 추가
      maxUnavailable: 1 # 추가: 기존 Pod 1개 먼저 종료
      maxSurge: 0 # 추가: 새 Pod 추가 없이 교체만
  selector: { matchLabels: { app: order-service } }
  template:
    metadata: { labels: { app: order-service } }
    spec:
      nodeSelector: { "eks.amazonaws.com/nodegroup": "s3j-node-app" }
      containers:
      - name: order-service
        image: ${ECR}/sang3jeom/order-service:latest
        ports: [ { containerPort: 8082 } ]
        env:
        - name: ORDER_DB_URL
          valueFrom: { configMapKeyRef: { name: sang3jeom-config, key: ORDER_DB_URL } }
        - name: ORDER_DB_USERNAME
          valueFrom: { secretKeyRef: { name: sang3jeom-secrets, key: ORDER_DB_USERNAME } }
        - name: ORDER_DB_PASSWORD
          valueFrom: { secretKeyRef: { name: sang3jeom-secrets, key: ORDER_DB_PASSWORD } }
        - name: USER_SERVICE_URL
          value: http://user-service.dev.svc.cluster.local:8080
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: dev
  labels: { app: order-service }
spec:
  selector: { app: order-service }
  ports: [ { port: 8082, targetPort: 8082 } ]
  type: ClusterIP 