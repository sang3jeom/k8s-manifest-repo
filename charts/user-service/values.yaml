# Default values for user-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1
# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: 806070027856.dkr.ecr.ap-northeast-2.amazonaws.com/sang3jeom/user-service
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "195959c39ac009cd8dd9cbcbd231ffb429db39ab"
# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""
# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080
# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http
# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

tolerations: []
affinity: {}
env:
  - name: RDS_ENDPOINT
    valueFrom:
      configMapKeyRef:
        name: sang3jeom-config
        key: RDS_ENDPOINT
  - name: RDS_DB_NAME
    valueFrom:
      configMapKeyRef:
        name: sang3jeom-config
        key: USER_DB_NAME
  - name: DATASOURCE_USERNAME
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: USER_DB_USERNAME
  - name: DATASOURCE_PASSWORD
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: USER_DB_PASSWORD
  - name: SPRING_REDIS_HOST
    value: "redis"
  - name: SPRING_REDIS_PORT
    value: "6379"
  - name: JWT_SECRET
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: JWT_SECRET
  - name: JWT_EXPIRATION_MS
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: JWT_EXPIRATION_MS
  - name: GOOGLE_CLIENT_ID
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: GOOGLE_CLIENT_ID
  - name: GOOGLE_CLIENT_SECRET
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: GOOGLE_CLIENT_SECRET
  - name: KAKAO_CLIENT_ID
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: KAKAO_CLIENT_ID
  - name: KAKAO_CLIENT_SECRET
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: KAKAO_CLIENT_SECRET
  - name: AWS_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: AWS_ACCESS_KEY
  - name: AWS_SECRET_KEY
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: AWS_SECRET_KEY
  - name: S3_BUCKET
    valueFrom:
      configMapKeyRef:
        name: sang3jeom-config
        key: S3_BUCKET
  - name: S3_REGION
    valueFrom:
      configMapKeyRef:
        name: sang3jeom-config
        key: S3_REGION
  - name: AWS_REGION
    valueFrom:
      configMapKeyRef:
        name: sang3jeom-config
        key: AWS_REGION
  - name: BASE_URL
    valueFrom:
      configMapKeyRef:
        name: sang3jeom-config
        key: BASE_URL
  - name: MAIL_USERNAME
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: GMAIL_USERNAME
  - name: MAIL_PASSWORD
    valueFrom:
      secretKeyRef:
        name: sang3jeom-secrets
        key: GMAIL_APP_PASSWORD
  - name: SPRING_DATASOURCE_URL_FROM_CM
    value: "USER_DB_URL"
  - name: DATASOURCE_USERNAME_FROM_SECRET
    value: "USER_DB_USERNAME"
  - name: DATASOURCE_PASSWORD_FROM_SECRET
    value: "USER_DB_PASSWORD"

# NodeSelector 추가
nodeSelector:
  eks.amazonaws.com/nodegroup: s3j-node-app

# Health Check 수정
livenessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 40
  periodSeconds: 20
readinessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 20
  periodSeconds: 10